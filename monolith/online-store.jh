// From https://github.com/jhipster/jdl-samples/blob/main/e-commerce-monolith.jdl

// SHA1 is 160 bits-long (20 bytes)
SHA_LEN = 40
IMAGE_MAX_BYTES = 5000000

/** Product sold by the Online store */
entity Product {
    sku String required /* TODO pattern */
    upc String required /* TODO pattern */
    name String required
    description TextBlob
    price BigDecimal required min(0)
    productSize ProductSize required
    colors String pattern(/^([a-z]+,)*[a-z]+$/) 
    /** For uploading the image */
    image ImageBlob maxbytes(IMAGE_MAX_BYTES)
    /** For caching with HTTP header Etag and If-None-Match */
    imageSha1 String minlength(SHA_LEN) maxlength(SHA_LEN) pattern(/[a-f0-9]{40}/)
    /** For the content delivery network */
    imageCdnUrl String /* TODO pattern */
    /** For caching with HTTP header Etag and If-None-Match */
    thumbnailSha1 String minlength(SHA_LEN) maxlength(SHA_LEN) pattern(/[a-f0-9]{40}/)
    /** For the content delivery network */
    thumbnailCdnUrl String /* TODO pattern */
}

enum ProductSize {
    S, M, L, XL, XXL
}

entity ProductCategory {
    name String required
    description String
}

entity CustomerDetails {
    gender Gender required
    phone String required
    addressLine1 String required
    addressLine2 String
    city String required
    country String required
}

enum Gender {
    MALE, FEMALE, OTHER
}

entity ShoppingCart {
    placedDate Instant required
    status OrderStatus required
    totalPrice BigDecimal required min(0)
    paymentMethod PaymentMethod required
    paymentReference String
}

enum OrderStatus {
    COMPLETED, PAID, PENDING, CANCELLED, REFUNDED
}

enum PaymentMethod {
    CREDIT_CARD(card), IDEAL(ideal)
}

entity ProductOrder {
    quantity Integer required min(0)
    totalPrice BigDecimal required min(0)
}

relationship OneToOne {
    CustomerDetails{user(login) required} to User
}

relationship ManyToOne {
    ProductOrder{product(name) required} to Product
}

relationship OneToMany {
    CustomerDetails{cart} to ShoppingCart{customerDetails required}, 
    ShoppingCart{order} to ProductOrder{cart required}, 
    ProductCategory{product} to Product{productCategory(name) required}
}

service * with serviceClass
paginate Product, CustomerDetails, ProductCategory with pagination
